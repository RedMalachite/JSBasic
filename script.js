// console.log('number' + 23 + 32);
// // number2332
// // 'number' + 23 = 'number23'
// // 'number23' + 32 = 'number2332'
// // В каждом шаге получаем строку.
// console.log(41 + 1 + 'number');
// // 42number
// // сначала происходит сложение чисел 41 и 1
// // Далее конкантенация полученной суммы со строкой.
// console.log(null + 1);
// // 1
// // null - фактическая пустота, которая при преобразовании превращается в 0
// // 0 + 1 = 1
// console.log('five' + + 'two');
// // fiveNaN
// // результатом действия +'two' становится NaN, так как строку с нечисловыми символами нельзя преобразовать в число.
// // конкантенация строки five c NaN
// console.log(2 && 7);
// // 7
// // 2 и 7 соответствуют true. Поэтому выводится последнее значение "выражения"
// console.log(+'40' + +'2');
// //42
// // стороковые значения '40' и '2' преобразовываются в целочисленные с помощью + перед ними
// // получаем 42 в виде целочисленного типа данных
// console.log('10' - 5 === 6);
// // false
// // '10' преобразовуется в 10
// // 10 - 5 = 5
// // 5 не равно 6
// // следовательно результат false
// console.log(true + false);
// // 1
// // преобразование: true = 1, false = 0
// // 1 + 0 = 1
// console.log('4px' - 3);
// // NaN
// // '4px' не возможно преобразовать в целочисленное значение из-за наличия букв
// // поэтому разность между двумя операндами не может быть числом (Not a Number)
// console.log('4' - 3);
// // 1
// // '4' преобразовывается в 4
// // получаем разницу между заданными операндами
// console.log('2' + 3 ** 2);
// // 29
// // 3 в степени 2 = 9
// // конкантенация '2' и 9
// console.log(12 / '6');
// // 2
// // строка '6' преобразуется в число
// // 12 делим на 6 = 2
// console.log(23 + 42 + 'number');
// // 65number
// // 23 суммируется с 42 = 65
// // конкантенация числа 65 со строкой 'number', получаем строку
// console.log('10' + (5 === 6));
// // 10false
// // 5 не равно шести - получаем false
// // конкантенация строки '10' с булевой false дает строку '10false'
// console.log('number' + 15 + 3);
// // number153
// // 'number' + 15 = 'number15'
// // 'number15' + 3 = 'number153' (строка)
// console.log(undefined + 1);
// // NaN
// // undefined не является числовым значением и не может быть в него преобразовано получаем Not a Number
// // NaN + 1 = NaN

// console.log('true' == true);

// console.log(false == 'false');

// console.log(null == '');
// // false
// // null - воспринимается типом данных object
// // '' - это пустая строка или примитивный тип данных string
// // объекты и примитивы невозможно преобразовать друг в друга. Поэтому результат false
// console.log(3 ** (9 / 3));
// // 27
// // сначала делаем вычисления в скобках = 3
// 3 возводим в куб = 27
// console.log(!!'false' == !!'true');
// // true
// // Два восклицательных знака преобразовывают данные в булевый тип
// // строки 'false' и 'true' не пустые, значит получают булевой значение true
// // true == true  и получаем результат true
// console.log (0 || '0' && 1);
// // 1
// // сперва выполняем '0' && 1. Здесь строка и число - булевые true. Получаем значение последнего операнда 1.
// // сравниваем 0 ИЛИ 1 и ищем булевый true.
// // 1 это true, что иполучаем результатом
// console.log (1 < 2 < 3);
// // true
// // 1 меньше 2 = true
// // 2 меньше 3 = true
// // получаем true результат
// console.log ('foo'+ + +'bar');
// // fooNaN
// // сначала происходит безрезультативная попытка преобразования строки 'bar' в число из-за наличия букв. Получаем NaN
// // конкантенация 'foo' b NaN выдает результат fooNaN в виде строки
// // 1-й или 2-й плюс по отдельности не играет никакой роли в данной инструкции
// console.log (3 ** 2 / 3);
// 3 в квадрате = 9
// 9 делим на 3 = 3
// console.log (1 < 2 > 3);
// // false
// // 1 меньне 2
// // 2 НЕ больше 3, следовательно результат false
// console.log ((+null == false) < 1);
// // false
// // + преобразовывает null в 0
// // 0 само по себе это false и наоборот. Сравнение 0 и false дает результат true
// // true преобразовывается в 1. 1 НЕ меньше 1. Следовательно результат false
// console.log (false && true || true);
// // false
// // false И true дает false, так как используестся логический оператор И, два логически неравных друг другу значения
// // получаем false || true.
// // Результат true. Логический оператор ИЛИ проверяет наличие true и выводит его результатом в случае его наличия
// console.log (false && (true || true));
// // в скобках true ИЛИ true дает true. Один из операндов "верен"
// // получаем false && true.
// // результат false так как false и true логически противоположны
// console.log ((+null == false) < 1 ** 5);
// // false
// // в скобках +null дает 0
// // 0 == false дает true, так как false преобразуется в 0 и выражение стает верным
// // 1 в пятой степени равно 1
// // в конце получаем true меньше 1
// // true преобразовывается в 1.
// // 1 НЕ меньше 1, значит результат false
console.log("true" == true);